layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "label"
  python_param {
    module: "voc_layers"
    layer: "SBDDSegDataLayer"
    param_str: "{\'sbdd_dir\': \'../data/sbdd/dataset\', \'seed\': 1337, \'split\': \'train\', \'mean\': (104.00699, 116.66877, 122.67892)}"
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 3
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn_conv1"
  type: "BatchNorm"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "scale_conv1"
  type: "Scale"
  bottom: "conv1"
  top: "conv1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv1_relu"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "res2a_branch1"
  type: "Convolution"
  bottom: "pool1"
  top: "res2a_branch1"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn2a_branch1"
  type: "BatchNorm"
  bottom: "res2a_branch1"
  top: "res2a_branch1"
}
layer {
  name: "scale2a_branch1"
  type: "Scale"
  bottom: "res2a_branch1"
  top: "res2a_branch1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res2a_branch2a"
  type: "Convolution"
  bottom: "pool1"
  top: "res2a_branch2a"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn2a_branch2a"
  type: "BatchNorm"
  bottom: "res2a_branch2a"
  top: "res2a_branch2a"
}
layer {
  name: "scale2a_branch2a"
  type: "Scale"
  bottom: "res2a_branch2a"
  top: "res2a_branch2a"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res2a_branch2a_relu"
  type: "ReLU"
  bottom: "res2a_branch2a"
  top: "res2a_branch2a"
}
layer {
  name: "res2a_branch2b"
  type: "Convolution"
  bottom: "res2a_branch2a"
  top: "res2a_branch2b"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn2a_branch2b"
  type: "BatchNorm"
  bottom: "res2a_branch2b"
  top: "res2a_branch2b"
}
layer {
  name: "scale2a_branch2b"
  type: "Scale"
  bottom: "res2a_branch2b"
  top: "res2a_branch2b"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res2a"
  type: "Eltwise"
  bottom: "res2a_branch1"
  bottom: "res2a_branch2b"
  top: "res2a"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "res2a_relu"
  type: "ReLU"
  bottom: "res2a"
  top: "res2a"
}
layer {
  name: "res2b_branch2a"
  type: "Convolution"
  bottom: "res2a"
  top: "res2b_branch2a"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn2b_branch2a"
  type: "BatchNorm"
  bottom: "res2b_branch2a"
  top: "res2b_branch2a"
}
layer {
  name: "scale2b_branch2a"
  type: "Scale"
  bottom: "res2b_branch2a"
  top: "res2b_branch2a"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res2b_branch2a_relu"
  type: "ReLU"
  bottom: "res2b_branch2a"
  top: "res2b_branch2a"
}
layer {
  name: "res2b_branch2b"
  type: "Convolution"
  bottom: "res2b_branch2a"
  top: "res2b_branch2b"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn2b_branch2b"
  type: "BatchNorm"
  bottom: "res2b_branch2b"
  top: "res2b_branch2b"
}
layer {
  name: "scale2b_branch2b"
  type: "Scale"
  bottom: "res2b_branch2b"
  top: "res2b_branch2b"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res2b"
  type: "Eltwise"
  bottom: "res2a"
  bottom: "res2b_branch2b"
  top: "res2b"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "res2b_relu"
  type: "ReLU"
  bottom: "res2b"
  top: "res2b"
}
layer {
  name: "res3a_branch1"
  type: "Convolution"
  bottom: "res2b"
  top: "res3a_branch1"
  convolution_param {
    num_output: 128
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 2
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn3a_branch1"
  type: "BatchNorm"
  bottom: "res3a_branch1"
  top: "res3a_branch1"
}
layer {
  name: "scale3a_branch1"
  type: "Scale"
  bottom: "res3a_branch1"
  top: "res3a_branch1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res3a_branch2a"
  type: "Convolution"
  bottom: "res2b"
  top: "res3a_branch2a"
  convolution_param {
    num_output: 128
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn3a_branch2a"
  type: "BatchNorm"
  bottom: "res3a_branch2a"
  top: "res3a_branch2a"
}
layer {
  name: "scale3a_branch2a"
  type: "Scale"
  bottom: "res3a_branch2a"
  top: "res3a_branch2a"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res3a_branch2a_relu"
  type: "ReLU"
  bottom: "res3a_branch2a"
  top: "res3a_branch2a"
}
layer {
  name: "res3a_branch2b"
  type: "Convolution"
  bottom: "res3a_branch2a"
  top: "res3a_branch2b"
  convolution_param {
    num_output: 128
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn3a_branch2b"
  type: "BatchNorm"
  bottom: "res3a_branch2b"
  top: "res3a_branch2b"
}
layer {
  name: "scale3a_branch2b"
  type: "Scale"
  bottom: "res3a_branch2b"
  top: "res3a_branch2b"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res3a"
  type: "Eltwise"
  bottom: "res3a_branch1"
  bottom: "res3a_branch2b"
  top: "res3a"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "res3a_relu"
  type: "ReLU"
  bottom: "res3a"
  top: "res3a"
}
layer {
  name: "res3b_branch2a"
  type: "Convolution"
  bottom: "res3a"
  top: "res3b_branch2a"
  convolution_param {
    num_output: 128
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn3b_branch2a"
  type: "BatchNorm"
  bottom: "res3b_branch2a"
  top: "res3b_branch2a"
}
layer {
  name: "scale3b_branch2a"
  type: "Scale"
  bottom: "res3b_branch2a"
  top: "res3b_branch2a"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res3b_branch2a_relu"
  type: "ReLU"
  bottom: "res3b_branch2a"
  top: "res3b_branch2a"
}
layer {
  name: "res3b_branch2b"
  type: "Convolution"
  bottom: "res3b_branch2a"
  top: "res3b_branch2b"
  convolution_param {
    num_output: 128
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn3b_branch2b"
  type: "BatchNorm"
  bottom: "res3b_branch2b"
  top: "res3b_branch2b"
}
layer {
  name: "scale3b_branch2b"
  type: "Scale"
  bottom: "res3b_branch2b"
  top: "res3b_branch2b"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res3b"
  type: "Eltwise"
  bottom: "res3a"
  bottom: "res3b_branch2b"
  top: "res3b"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "res3b_relu"
  type: "ReLU"
  bottom: "res3b"
  top: "res3b"
}
layer {
  name: "res4a_branch1"
  type: "Convolution"
  bottom: "res3b"
  top: "res4a_branch1"
  convolution_param {
    num_output: 256
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 2
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn4a_branch1"
  type: "BatchNorm"
  bottom: "res4a_branch1"
  top: "res4a_branch1"
}
layer {
  name: "scale4a_branch1"
  type: "Scale"
  bottom: "res4a_branch1"
  top: "res4a_branch1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res4a_branch2a"
  type: "Convolution"
  bottom: "res3b"
  top: "res4a_branch2a"
  convolution_param {
    num_output: 256
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn4a_branch2a"
  type: "BatchNorm"
  bottom: "res4a_branch2a"
  top: "res4a_branch2a"
}
layer {
  name: "scale4a_branch2a"
  type: "Scale"
  bottom: "res4a_branch2a"
  top: "res4a_branch2a"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res4a_branch2a_relu"
  type: "ReLU"
  bottom: "res4a_branch2a"
  top: "res4a_branch2a"
}
layer {
  name: "res4a_branch2b"
  type: "Convolution"
  bottom: "res4a_branch2a"
  top: "res4a_branch2b"
  convolution_param {
    num_output: 256
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn4a_branch2b"
  type: "BatchNorm"
  bottom: "res4a_branch2b"
  top: "res4a_branch2b"
}
layer {
  name: "scale4a_branch2b"
  type: "Scale"
  bottom: "res4a_branch2b"
  top: "res4a_branch2b"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res4a"
  type: "Eltwise"
  bottom: "res4a_branch1"
  bottom: "res4a_branch2b"
  top: "res4a"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "res4a_relu"
  type: "ReLU"
  bottom: "res4a"
  top: "res4a"
}
layer {
  name: "res4b_branch2a"
  type: "Convolution"
  bottom: "res4a"
  top: "res4b_branch2a"
  convolution_param {
    num_output: 256
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn4b_branch2a"
  type: "BatchNorm"
  bottom: "res4b_branch2a"
  top: "res4b_branch2a"
}
layer {
  name: "scale4b_branch2a"
  type: "Scale"
  bottom: "res4b_branch2a"
  top: "res4b_branch2a"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res4b_branch2a_relu"
  type: "ReLU"
  bottom: "res4b_branch2a"
  top: "res4b_branch2a"
}
layer {
  name: "res4b_branch2b"
  type: "Convolution"
  bottom: "res4b_branch2a"
  top: "res4b_branch2b"
  convolution_param {
    num_output: 256
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn4b_branch2b"
  type: "BatchNorm"
  bottom: "res4b_branch2b"
  top: "res4b_branch2b"
}
layer {
  name: "scale4b_branch2b"
  type: "Scale"
  bottom: "res4b_branch2b"
  top: "res4b_branch2b"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res4b"
  type: "Eltwise"
  bottom: "res4a"
  bottom: "res4b_branch2b"
  top: "res4b"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "res4b_relu"
  type: "ReLU"
  bottom: "res4b"
  top: "res4b"
}
layer {
  name: "res5a_branch1"
  type: "Convolution"
  bottom: "res4b"
  top: "res5a_branch1"
  convolution_param {
    num_output: 512
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 2
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn5a_branch1"
  type: "BatchNorm"
  bottom: "res5a_branch1"
  top: "res5a_branch1"
}
layer {
  name: "scale5a_branch1"
  type: "Scale"
  bottom: "res5a_branch1"
  top: "res5a_branch1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res5a_branch2a"
  type: "Convolution"
  bottom: "res4b"
  top: "res5a_branch2a"
  convolution_param {
    num_output: 512
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn5a_branch2a"
  type: "BatchNorm"
  bottom: "res5a_branch2a"
  top: "res5a_branch2a"
}
layer {
  name: "scale5a_branch2a"
  type: "Scale"
  bottom: "res5a_branch2a"
  top: "res5a_branch2a"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res5a_branch2a_relu"
  type: "ReLU"
  bottom: "res5a_branch2a"
  top: "res5a_branch2a"
}
layer {
  name: "res5a_branch2b"
  type: "Convolution"
  bottom: "res5a_branch2a"
  top: "res5a_branch2b"
  convolution_param {
    num_output: 512
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn5a_branch2b"
  type: "BatchNorm"
  bottom: "res5a_branch2b"
  top: "res5a_branch2b"
}
layer {
  name: "scale5a_branch2b"
  type: "Scale"
  bottom: "res5a_branch2b"
  top: "res5a_branch2b"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res5a"
  type: "Eltwise"
  bottom: "res5a_branch1"
  bottom: "res5a_branch2b"
  top: "res5a"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "res5a_relu"
  type: "ReLU"
  bottom: "res5a"
  top: "res5a"
}
layer {
  name: "res5b_branch2a"
  type: "Convolution"
  bottom: "res5a"
  top: "res5b_branch2a"
  convolution_param {
    num_output: 512
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn5b_branch2a"
  type: "BatchNorm"
  bottom: "res5b_branch2a"
  top: "res5b_branch2a"
}
layer {
  name: "scale5b_branch2a"
  type: "Scale"
  bottom: "res5b_branch2a"
  top: "res5b_branch2a"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res5b_branch2a_relu"
  type: "ReLU"
  bottom: "res5b_branch2a"
  top: "res5b_branch2a"
}
layer {
  name: "res5b_branch2b"
  type: "Convolution"
  bottom: "res5b_branch2a"
  top: "res5b_branch2b"
  convolution_param {
    num_output: 512
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "bn5b_branch2b"
  type: "BatchNorm"
  bottom: "res5b_branch2b"
  top: "res5b_branch2b"
}
layer {
  name: "scale5b_branch2b"
  type: "Scale"
  bottom: "res5b_branch2b"
  top: "res5b_branch2b"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "res5b"
  type: "Eltwise"
  bottom: "res5a"
  bottom: "res5b_branch2b"
  top: "res5b"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "res5b_relu"
  type: "ReLU"
  bottom: "res5b"
  top: "res5b"
}
layer {
  name: "decoder4_conv1"
  type: "Convolution"
  bottom: "res5b"
  top: "decoder4_conv1"
  convolution_param {
    num_output: 128
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "decoder4_BN1"
  type: "BatchNorm"
  bottom: "decoder4_conv1"
  top: "decoder4_conv1"
}
layer {
  name: "decoder4_scale1"
  type: "Scale"
  bottom: "decoder4_conv1"
  top: "decoder4_conv1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder4_relu1"
  type: "ReLU"
  bottom: "decoder4_conv1"
  top: "decoder4_conv1"
}
layer {
  name: "decoder4_deconv"
  type: "Deconvolution"
  bottom: "decoder4_conv1"
  top: "decoder4_deconv"
  convolution_param {
    num_output: 128
    bias_term: true
    pad: 0
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "decoder4_BN2"
  type: "BatchNorm"
  bottom: "decoder4_deconv"
  top: "decoder4_deconv"
}
layer {
  name: "decoder4_scale2"
  type: "Scale"
  bottom: "decoder4_deconv"
  top: "decoder4_deconv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder4_relu2"
  type: "ReLU"
  bottom: "decoder4_deconv"
  top: "decoder4_deconv"
}
layer {
  name: "decoder4_conv3"
  type: "Convolution"
  bottom: "decoder4_deconv"
  top: "decoder4_conv3"
  convolution_param {
    num_output: 256
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "decoder4_BN3"
  type: "BatchNorm"
  bottom: "decoder4_conv3"
  top: "decoder4_conv3"
}
layer {
  name: "decoder4_scale3"
  type: "Scale"
  bottom: "decoder4_conv3"
  top: "decoder4_conv3"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder4_relu3"
  type: "ReLU"
  bottom: "decoder4_conv3"
  top: "decoder4_conv3"
}
layer {
  name: "Crop1"
  type: "Crop"
  bottom: "decoder4_conv3"
  bottom: "res4b"
  top: "Crop1"
  crop_param {
    axis: 2
    offset: 1
  }
}
layer {
  name: "Eltwise1"
  type: "Eltwise"
  bottom: "res4b"
  bottom: "Crop1"
  top: "Eltwise1"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "decoder3_conv1"
  type: "Convolution"
  bottom: "Eltwise1"
  top: "decoder3_conv1"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "decoder3_BN1"
  type: "BatchNorm"
  bottom: "decoder3_conv1"
  top: "decoder3_conv1"
}
layer {
  name: "decoder3_scale1"
  type: "Scale"
  bottom: "decoder3_conv1"
  top: "decoder3_conv1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder3_relu1"
  type: "ReLU"
  bottom: "decoder3_conv1"
  top: "decoder3_conv1"
}
layer {
  name: "decoder3_deconv"
  type: "Deconvolution"
  bottom: "decoder3_conv1"
  top: "decoder3_deconv"
  convolution_param {
    num_output: 64
    bias_term: true
    pad: 0
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "decoder3_BN2"
  type: "BatchNorm"
  bottom: "decoder3_deconv"
  top: "decoder3_deconv"
}
layer {
  name: "decoder3_scale2"
  type: "Scale"
  bottom: "decoder3_deconv"
  top: "decoder3_deconv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder3_relu2"
  type: "ReLU"
  bottom: "decoder3_deconv"
  top: "decoder3_deconv"
}
layer {
  name: "decoder3_conv3"
  type: "Convolution"
  bottom: "decoder3_deconv"
  top: "decoder3_conv3"
  convolution_param {
    num_output: 128
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "decoder3_BN3"
  type: "BatchNorm"
  bottom: "decoder3_conv3"
  top: "decoder3_conv3"
}
layer {
  name: "decoder3_scale3"
  type: "Scale"
  bottom: "decoder3_conv3"
  top: "decoder3_conv3"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder3_relu3"
  type: "ReLU"
  bottom: "decoder3_conv3"
  top: "decoder3_conv3"
}
layer {
  name: "Crop2"
  type: "Crop"
  bottom: "decoder3_conv3"
  bottom: "res3b"
  top: "Crop2"
  crop_param {
    axis: 2
    offset: 1
  }
}
layer {
  name: "Eltwise2"
  type: "Eltwise"
  bottom: "res3b"
  bottom: "Crop2"
  top: "Eltwise2"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "decoder2_conv1"
  type: "Convolution"
  bottom: "Eltwise2"
  top: "decoder2_conv1"
  convolution_param {
    num_output: 32
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "decoder2_BN1"
  type: "BatchNorm"
  bottom: "decoder2_conv1"
  top: "decoder2_conv1"
}
layer {
  name: "decoder2_scale1"
  type: "Scale"
  bottom: "decoder2_conv1"
  top: "decoder2_conv1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder2_relu1"
  type: "ReLU"
  bottom: "decoder2_conv1"
  top: "decoder2_conv1"
}
layer {
  name: "decoder2_deconv"
  type: "Deconvolution"
  bottom: "decoder2_conv1"
  top: "decoder2_deconv"
  convolution_param {
    num_output: 32
    bias_term: true
    pad: 0
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "decoder2_BN2"
  type: "BatchNorm"
  bottom: "decoder2_deconv"
  top: "decoder2_deconv"
}
layer {
  name: "decoder2_scale2"
  type: "Scale"
  bottom: "decoder2_deconv"
  top: "decoder2_deconv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder2_relu2"
  type: "ReLU"
  bottom: "decoder2_deconv"
  top: "decoder2_deconv"
}
layer {
  name: "decoder2_conv3"
  type: "Convolution"
  bottom: "decoder2_deconv"
  top: "decoder2_conv3"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "decoder2_BN3"
  type: "BatchNorm"
  bottom: "decoder2_conv3"
  top: "decoder2_conv3"
}
layer {
  name: "decoder2_scale3"
  type: "Scale"
  bottom: "decoder2_conv3"
  top: "decoder2_conv3"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder2_relu3"
  type: "ReLU"
  bottom: "decoder2_conv3"
  top: "decoder2_conv3"
}
layer {
  name: "Crop3"
  type: "Crop"
  bottom: "decoder2_conv3"
  bottom: "res2b"
  top: "Crop3"
  crop_param {
    axis: 2
    offset: 1
  }
}
layer {
  name: "Eltwise3"
  type: "Eltwise"
  bottom: "res2b"
  bottom: "Crop3"
  top: "Eltwise3"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "decoder1_conv1"
  type: "Convolution"
  bottom: "Eltwise3"
  top: "decoder1_conv1"
  convolution_param {
    num_output: 16
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "decoder1_BN1"
  type: "BatchNorm"
  bottom: "decoder1_conv1"
  top: "decoder1_conv1"
}
layer {
  name: "decoder1_scale1"
  type: "Scale"
  bottom: "decoder1_conv1"
  top: "decoder1_conv1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder1_relu1"
  type: "ReLU"
  bottom: "decoder1_conv1"
  top: "decoder1_conv1"
}
layer {
  name: "decoder1_deconv"
  type: "Deconvolution"
  bottom: "decoder1_conv1"
  top: "decoder1_deconv"
  convolution_param {
    num_output: 16
    bias_term: true
    pad: 0
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "decoder1_BN2"
  type: "BatchNorm"
  bottom: "decoder1_deconv"
  top: "decoder1_deconv"
}
layer {
  name: "decoder1_scale2"
  type: "Scale"
  bottom: "decoder1_deconv"
  top: "decoder1_deconv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder1_relu2"
  type: "ReLU"
  bottom: "decoder1_deconv"
  top: "decoder1_deconv"
}
layer {
  name: "decoder1_conv3"
  type: "Convolution"
  bottom: "decoder1_deconv"
  top: "decoder1_conv3"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "decoder1_BN3"
  type: "BatchNorm"
  bottom: "decoder1_conv3"
  top: "decoder1_conv3"
}
layer {
  name: "decoder1_scale3"
  type: "Scale"
  bottom: "decoder1_conv3"
  top: "decoder1_conv3"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "decoder1_relu3"
  type: "ReLU"
  bottom: "decoder1_conv3"
  top: "decoder1_conv3"
}
layer {
  name: "Crop4"
  type: "Crop"
  bottom: "decoder1_conv3"
  bottom: "pool1"
  top: "Crop4"
  crop_param {
    axis: 2
    offset: 1
  }
}
layer {
  name: "end_block_deconv1"
  type: "Deconvolution"
  bottom: "Crop4"
  top: "end_block_deconv1"
  convolution_param {
    num_output: 32
    bias_term: true
    pad: 0
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "end_block_BN1"
  type: "BatchNorm"
  bottom: "end_block_deconv1"
  top: "end_block_deconv1"
}
layer {
  name: "end_block_scale1"
  type: "Scale"
  bottom: "end_block_deconv1"
  top: "end_block_deconv1"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "end_block_relu1"
  type: "ReLU"
  bottom: "end_block_deconv1"
  top: "end_block_deconv1"
}
layer {
  name: "end_block_conv2"
  type: "Convolution"
  bottom: "end_block_deconv1"
  top: "end_block_conv2"
  convolution_param {
    num_output: 32
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "end_block_BN2"
  type: "BatchNorm"
  bottom: "end_block_conv2"
  top: "end_block_conv2"
}
layer {
  name: "end_block_scale2"
  type: "Scale"
  bottom: "end_block_conv2"
  top: "end_block_conv2"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "end_block_relu2"
  type: "ReLU"
  bottom: "end_block_conv2"
  top: "end_block_conv2"
}
layer {
  name: "end_block_deconv3"
  type: "Deconvolution"
  bottom: "end_block_conv2"
  top: "end_block_deconv3"
  convolution_param {
    num_output: 21
    bias_term: true
    pad: 0
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "end_block_BN3"
  type: "BatchNorm"
  bottom: "end_block_deconv3"
  top: "end_block_deconv3"
}
layer {
  name: "end_block_scale3"
  type: "Scale"
  bottom: "end_block_deconv3"
  top: "end_block_deconv3"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "end_block_relu3"
  type: "ReLU"
  bottom: "end_block_deconv3"
  top: "end_block_deconv3"
}
layer {
  name: "Crop5"
  type: "Crop"
  bottom: "end_block_deconv3"
  bottom: "data"
  top: "Crop5"
  crop_param {
    axis: 2
    offset: 2
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "Crop5"
  bottom: "label"
  top: "loss"
  loss_param {
    ignore_label: 255
    normalize: false
  }
}
